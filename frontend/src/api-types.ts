/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/team/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register User */
        post: operations["register_user_team_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Team */
        post: operations["create_team_team_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join Team */
        post: operations["join_team_team_join_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/assign-color": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Color To User
         * @description Assign a unique color to a user within their team.
         */
        post: operations["assign_color_to_user_team_assign_color_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/{team_id}/validate-colors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Team Colors
         * @description Validate that all players in a team have unique colors.
         */
        get: operations["validate_team_colors_team__team_id__validate_colors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/{team_id}/resolve-conflicts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resolve Color Conflicts
         * @description Resolve any color conflicts in a team by reassigning colors.
         */
        post: operations["resolve_color_conflicts_team__team_id__resolve_conflicts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/{team_id}/available-colors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Colors
         * @description Get available and used colors for a team.
         */
        get: operations["get_available_colors_team__team_id__available_colors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Teams
         * @description Get only teams that are available for players to join.
         *     A team is available if:
         *     1. It has fewer than 4 players
         *     2. It has no active game session (lobby, countdown, active)
         */
        get: operations["get_available_teams_team_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Teams
         * @description List all teams (for admin/debug purposes).
         *     For user-facing team listing, use /team/available instead.
         */
        get: operations["list_teams_team__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Game Session */
        post: operations["create_game_session_game_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/session/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Session */
        get: operations["get_current_session_game_session__team_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/session/{session_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Game Session
         * @description Start the game (transition from countdown to active)
         */
        post: operations["start_game_session_game_session__session_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/session/{session_id}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Game Session State
         * @description Update game session state (lobby, countdown, active, finished)
         */
        post: operations["update_game_session_state_game_session__session_id__state_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Puzzle */
        post: operations["create_puzzle_puzzle_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/current/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current Puzzle */
        get: operations["get_current_puzzle_puzzle_current__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Answer */
        post: operations["submit_answer_puzzle_answer_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/points/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Team Points */
        get: operations["get_team_points_puzzle_points__team_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/decay/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Decay Points */
        post: operations["decay_points_puzzle_decay__team_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AssignColorRequest
         * @description Assign Color Request: Request to assign a color to a user
         */
        AssignColorRequest: {
            /**
             * User Id
             * @description ID of the user to assign color to
             */
            user_id: number;
            /**
             * Team Id
             * @description ID of the team the user belongs to
             */
            team_id: number;
            /**
             * Preferred Color
             * @description Preferred color (optional)
             */
            preferred_color?: unknown | null;
        };
        /**
         * AvailableColorsResponse
         * @description Available Colors Response: Response for available colors
         */
        AvailableColorsResponse: {
            /** Success */
            success: boolean;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /**
         * AvailableTeam
         * @description Available Team: Team that can accept new players
         */
        AvailableTeam: {
            /**
             * Id
             * @description Team identifier
             */
            id: number;
            /**
             * Name
             * @description Team name
             */
            name: string;
            /**
             * Members
             * @description Current team members
             */
            members: unknown[];
            /**
             * Player Count
             * @description Number of players in the team
             */
            player_count: number;
            /**
             * Max Players
             * @description Maximum number of players allowed in the team
             */
            max_players?: number | null;
            /**
             * Status
             * @description Current team status
             */
            status: unknown;
            /**
             * Game Session Id
             * @description ID of active game session (if any)
             */
            game_session_id?: number | null;
            /**
             * Game Status
             * @description Status of active game session (if any)
             */
            game_status?: ("lobby" | "countdown" | "active" | "finished") | null;
        };
        /**
         * ColorAssignmentResponse
         * @description Color Assignment Response: Response containing color assignment result
         */
        ColorAssignmentResponse: {
            /** Success */
            success: boolean;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /**
         * ColorConflictResolutionResponse
         * @description Color Conflict Resolution Response: Response for color conflict resolution
         */
        ColorConflictResolutionResponse: {
            /** Success */
            success: boolean;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /**
         * GameSessionCreate
         * @description Game Session Create: Request to create a new game session
         */
        GameSessionCreate: {
            /**
             * Team Id
             * @description ID of the team for this game session
             */
            team_id: number;
        };
        /**
         * GameSessionOut
         * @description Game Session Out: Game session response model
         */
        GameSessionOut: {
            /**
             * Id
             * @description Game session ID
             */
            id: number;
            /**
             * Team Id
             * @description Team ID
             */
            team_id: number;
            /**
             * Status
             * @description Game session status
             * @enum {string}
             */
            status: "lobby" | "countdown" | "active" | "finished";
            /**
             * Started At
             * @description When the game started
             */
            started_at?: string | null;
            /**
             * Ended At
             * @description When the game ended
             */
            ended_at?: string | null;
            /**
             * Survival Time Seconds
             * @description How long the team survived in seconds
             */
            survival_time_seconds?: number | null;
        };
        /**
         * GameSessionStateUpdate
         * @description Game Session State Update: Request to update game session state
         */
        GameSessionStateUpdate: {
            /**
             * Status
             * @description New status for the game session
             * @enum {string}
             */
            status: "lobby" | "countdown" | "active" | "finished";
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * PuzzleAnswer
         * @description Puzzle Answer: Request to submit a puzzle answer
         */
        PuzzleAnswer: {
            /**
             * Puzzle Id
             * @description ID of the puzzle being answered
             */
            puzzle_id: number;
            /**
             * Answer
             * @description Player's answer to the puzzle
             */
            answer: string;
        };
        /**
         * PuzzleCreate
         * @description Puzzle Create: Request to create a new puzzle
         */
        PuzzleCreate: {
            /**
             * Type
             * @description Type of puzzle to create
             * @enum {string}
             */
            type: "memory" | "spatial" | "concentration" | "multitasking";
            /**
             * Game Session Id
             * @description ID of the game session
             */
            game_session_id: number;
            /**
             * User Id
             * @description ID of the user for this puzzle
             */
            user_id: number;
        };
        /**
         * PuzzleResult
         * @description Puzzle Result: Puzzle result response model
         */
        PuzzleResult: {
            /**
             * Correct
             * @description Whether the answer was correct
             */
            correct: boolean;
            /**
             * Awarded To User Id
             * @description ID of user who received points
             */
            awarded_to_user_id?: number | null;
            /**
             * Points Awarded
             * @description Number of points awarded
             */
            points_awarded: number;
            /**
             * Next Puzzle Id
             * @description ID of next puzzle (if any)
             */
            next_puzzle_id?: number | null;
            /**
             * Next Puzzle
             * @description Next puzzle data (if any)
             */
            next_puzzle?: unknown | null;
        };
        /**
         * PuzzleState
         * @description Puzzle State: Puzzle state response model
         */
        PuzzleState: {
            /**
             * Id
             * @description Puzzle ID
             */
            id: number;
            /**
             * Type
             * @description Puzzle type
             * @enum {string}
             */
            type: "memory" | "spatial" | "concentration" | "multitasking";
            /**
             * Data
             * @description Puzzle-specific data
             */
            data: unknown;
            /**
             * Status
             * @description Puzzle status
             * @enum {string}
             */
            status: "active" | "completed" | "failed";
            /**
             * Correct Answer
             * @description Correct answer for the puzzle
             */
            correct_answer: string;
        };
        /**
         * TeamColorValidationResponse
         * @description Team Color Validation Response: Response for team color validation
         */
        TeamColorValidationResponse: {
            /** Success */
            success: boolean;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: string | null;
        };
        /**
         * TeamCreate
         * @description Team Create: Request to create a new team
         */
        TeamCreate: {
            /**
             * Name
             * @description Name for the new team
             */
            name: string;
        };
        /**
         * TeamOut
         * @description Team Out: Team response model
         */
        TeamOut: {
            /**
             * Id
             * @description Team ID
             */
            id: number;
            /**
             * Name
             * @description Team name
             */
            name: string;
        };
        /**
         * TeamPoints
         * @description Team Points: Team points response model
         */
        TeamPoints: {
            /**
             * Team Id
             * @description Team ID
             */
            team_id: number;
            /**
             * Players
             * @description List of players with their points
             */
            players: unknown[];
        };
        /**
         * TeamWithMembersOut
         * @description Team With Members Out: Team with members response model
         */
        TeamWithMembersOut: {
            /**
             * Id
             * @description Team ID
             */
            id: number;
            /**
             * Name
             * @description Team name
             */
            name: string;
            /**
             * Members
             * @description Team members
             */
            members: unknown[];
        };
        /**
         * UserCreate
         * @description User Create: Request to create a new user
         */
        UserCreate: {
            /**
             * Username
             * @description Username for the new user
             */
            username: string;
        };
        /**
         * UserOut
         * @description User Out: User response model
         */
        UserOut: {
            /**
             * Id
             * @description User ID
             */
            id: number;
            /**
             * Username
             * @description Username
             */
            username: string;
            /**
             * Team Id
             * @description Team ID
             */
            team_id?: number | null;
            /**
             * Points
             * @description Current points
             */
            points: number;
            /**
             * Color
             * @description Assigned color
             */
            color?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_user_team_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_team_team_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    join_team_team_join_post: {
        parameters: {
            query: {
                username: string;
                team_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    assign_color_to_user_team_assign_color_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignColorRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ColorAssignmentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_team_colors_team__team_id__validate_colors_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamColorValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resolve_color_conflicts_team__team_id__resolve_conflicts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ColorConflictResolutionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_colors_team__team_id__available_colors_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableColorsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_teams_team_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableTeam"][];
                };
            };
        };
    };
    list_teams_team__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamWithMembersOut"][];
                };
            };
        };
    };
    create_game_session_game_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameSessionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_session_game_session__team_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_game_session_game_session__session_id__start_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_game_session_state_game_session__session_id__state_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameSessionStateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_puzzle_puzzle_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PuzzleCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuzzleState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_puzzle_puzzle_current__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuzzleState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_answer_puzzle_answer_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PuzzleAnswer"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PuzzleResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_team_points_puzzle_points__team_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamPoints"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    decay_points_puzzle_decay__team_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
